version: '3.8'

services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-enf}
      POSTGRES_USER: ${POSTGRES_USER:-test}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-test}  -d ${POSTGRES_DB:-enf}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  web:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - DEBUG=True
      - DATABASE_URL=postgres://${POSTGRES_USER:-test}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-enf}
      - DJANGO_SETTINGS_MODULE=enf.settings
      - VIRTUAL_ENV=/app/.venv
      - PATH=/app/.venv/bin:$PATH
    depends_on:
      db:
        condition: service_healthy
    # command: sh -c "python enf/manage.py migrate && gunicorn enf.wsgi:application --bind 0.0.0.0:8000" #prod
    command: >
      sh -c "
        echo 'Waiting for database to be fully ready...' &&
        sleep 15 &&
        python enf/manage.py migrate &&
        python enf/manage.py runserver 0.0.0.0:8000
      "
    networks:
      - app-network


  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - /etc/letsencrypt/:/etc/letsencrypt/
  #     - static:/app/static
  #     - media:/app/media
  #   depends_on:
  #     - web
  #   networks:
  #     - app-network


volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge